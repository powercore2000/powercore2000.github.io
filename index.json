[{"content":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eI\u0026rsquo;ve bought hundreds of products off the Unity Asset Store in my time.\u003c/p\u003e\n\u003cp\u003eWhile my list of shame may not be the longest, among my fellow unity developers, it\u0026rsquo;s still sitting around 500 assets at the time of writing this post. And I can confidently say I don\u0026rsquo;t regret almost any of my asset purchases up to this point. It was my love for purchasing assets and imagining what I could make with them that inspired me to make my \u003ca href=\"https://youtube.com/@powercore2000\"\u003eCyberspace Crusade program that powers my YouTube channel\u003c/a\u003e. However, I do have a bone to pick with a fair few of the assets I use on a regular basis.\u003c/p\u003e\n\u003cp\u003eAnd that issue is with assemblies.\u003c/p\u003e\n\u003ch2 id=\"but-what-are-assemblies-\"\u003eBut What Are Assemblies ‚ùì\u003c/h2\u003e\n\u003cp\u003eFor those that aren\u0026rsquo;t familiar, assembly definitions are boundaries people can set up in their code space. It represents a collection of similar scripts that should be packaged together and perform a particular set of behaviors. When your Unity projects are built, all code placed inside of assemblies is compiled into .dlls and can be accessed by your build game.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s generally standard practice for asset makers to put their code inside of an assembly definition reference. That way, the asset\u0026rsquo;s code is nicely segregated from the developer\u0026rsquo;s game code and doesn\u0026rsquo;t extend the time it takes to reload assemblies when an unrelated code recompilation happens. However, there\u0026rsquo;s a critical mistake I see too many asset makers do to this day with their assemblies: they lack a dedicated EditorAssembly for their assets.\u003c/p\u003e\n\u003ch2 id=\"the-silent-build-killer-\"\u003eThe Silent Build Killer üî™\u003c/h2\u003e\n\u003cp\u003eThe results of this are unnoticeable at first, but the consequences will rear their ugly head the moment a developer tries to create a build for their game. Any editor code not put into an editor-only assembly will throw build errors, as they try to access code only present in a Unity Editor environment. Depending on how many assets were added to the project and how long it had been since the last build, it can become quite a headache to sort out just to get your game back to a build-ready state.\u003c/p\u003e\n\u003cp\u003eI experienced this firsthand as I recreated a new build for my Cyberspace Crusade project to implement my new features. I\u0026rsquo;ve had issues with assets not having editor assemblies before, but for more junior devs who don\u0026rsquo;t work with assemblies in their own code or those working under time constraints like a game jam, it can be far more critical of an issue.\u003c/p\u003e\n\u003ch2 id=\"but-what-can-we-do-\"\u003eBut What Can We Do? ü§∑‚Äç‚ôÇÔ∏è\u003c/h2\u003e\n\u003cp\u003eWhat can be done about this? Adding the extra assembly isn\u0026rsquo;t particularly difficult. But asset makers taking that extra step can save developers like me a lot more work later on. The reason this issue likely gets past so many asset makers is that they don\u0026rsquo;t make game builds with their asset implemented. And quite a few developers might not get that far. But just a little bit of conscious design and trying to build out a test example with their asset can go a long way toward improving the quality of life for both new and experienced developers.\u003c/p\u003e\n\u003cp\u003eThanks for reading!\u003c/p\u003e\n","description":"As someone who's used the Unity Asset store for years, this one thing I see in assets drives me up the wall!","image":"/images/posts/post-2-thumbnail.png","permalink":"https://powercore2000.github.io/blogs/my-biggest-problem-with-the-unity-asset-store/","title":"My biggest problem with the Unity Asset Store"},{"content":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eHello, hello!\u003c/p\u003e\n\u003cp\u003eAlmost 3 months ago \u003ca href=\"https://youtu.be/gt0q1T8fVI4\"\u003eI announced my plans to make a tool named GPT to Unity\u003c/a\u003e, which was meant to provide access to OpenAi\u0026rsquo;s back-end system inside of the Unity Engine. At the time there were no other tools on the asset store providing that utility, and I found it would have been a fun project to test my web development skills by using ASP.Net Core. Since that announcement, a number of personal delays dramatically slowed development, and other solutions have been posted on the Unity Asset Store.\u003c/p\u003e\n\u003cp\u003eThat left me with a question, what to do with my tool now?\u003c/p\u003e\n\u003ch1 id=\"cloud-code-modules-saves-the-day\"\u003eCloud Code Modules Saves The Day!\u003c/h1\u003e\n\u003cp\u003eThe answer to my question came from my browsing the Unity Cloud Code Forums. For context, the initial implementation of my tool relied on calling Unity Cloud Code scripts to handle the more sensitive parts of interacting with the OpenAi API, such as passing in the OpenAi API Key in inside the header of a POST request. I was browsing the forums when I came across a week-old announcement for something called Unity Cloud Code Modules.\u003c/p\u003e\n\u003cp\u003eLittle did I know the answer to the fate of my tool, and its progress would be there.\u003c/p\u003e\n\u003cp\u003eUnity Cloud Code Modules allowed users to upload C# libraries to Unity\u0026rsquo;s Cloud Code infrastructure, and call them remotely via REST APIs. Now you could keep all of your unity code in C# when using Unity cloud services, and utilize concepts like model sharing in these projects. Knowing such a powerful tool now existed, was both a wonderful boon and a bit saddening. With Cloud Code Modules, it effectively invalidated the point of my GPT to the Unity tool\u0026rsquo;s structure. Now you didn\u0026rsquo;t need an external server program in C# to call OpenAi Endpoints. You could have all of that functionality, and more, natively inside of Unity itself.\u003c/p\u003e\n\u003cp\u003eBut the upside is, it was a new technology to learn, and by incorporating it, I could improve my own development abilities, and share my knowledge with others. I already had such a moment where I was able to \u003ca href=\"https://forum.unity.com/threads/calling-an-endpoint-inside-a-cloud-code-c-module-from-outside-of-unity.1417551/#post-8909796\"\u003espot a documentation error\u003c/a\u003e\nin the Cloud Code Modules code which Unity has since fixed for others.\u003c/p\u003e\n\u003ch1 id=\"whats-next-for-the-tool\"\u003eWhat\u0026rsquo;s Next For The Tool?\u003c/h1\u003e\n\u003cp\u003eSo, all in all, GPT to Unity has to be delayed yet again, but for good reasons! This time I swear. üòÖ\u003c/p\u003e\n\u003cp\u003eThe videos I release detailing the behavior of the tool will both serve as an introduction to the tool, and a video tutorial for how to use Unity Cloud Code Modules. That info will also be shown in my upcoming talk in the \u003ca href=\"https://gamedevguild.com/\"\u003eGame Dev Guild 2023\u003c/a\u003e where I describe how these technologies can help integrate AI with Unity Virtual Production Projects.\u003c/p\u003e\n\u003cp\u003eI hope my experiences with making GPT to Unity can serve as a good reflection for others in their projects.\u003c/p\u003e\n\u003cp\u003eThanks for reading!\u003c/p\u003e\n","description":"Giving an update on the status on GPT to Unity project's status","image":"/images/posts/gpt-to-unity-update-thumbnail.jpg","permalink":"https://powercore2000.github.io/blogs/update-on-gpt-to-unity/","title":"Update on the GPT to Unity Project"},{"content":"","description":"My gallery :earth_asia:","image":null,"permalink":"https://powercore2000.github.io/gallery/","title":"Image Gallery"}]